// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

type Image {
  imageId  String
  thumbUrl String
  fullUrl  String
  username String
  linkHTML String
}

model Board {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  clientId String
  title    String
  image    Image?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  List      List[]

  @@index([clientId])
}

model List {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  boardId   String   @db.ObjectId
  board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  cards     Card[]

  @@index([boardId])
}

model Card {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  order       Int
  description String?  @db.String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  listId      String   @db.ObjectId
  list        List     @relation(fields: [listId], references: [id], onDelete: Cascade)

  @@index([listId])
}

enum ACTION {
  CREATE
  UPDATE
  DELETE
}

enum ENTITY_TYPE {
  BOARD
  LIST
  CARD
  DOCUMENT
}

type User {
  userId String
  name   String @db.String
  image  String
}

type Entity {
  entityId String      @db.ObjectId
  type     ENTITY_TYPE
  title    String
}

model AuditLog {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User
  orgId     String?
  role      ROLE
  action    ACTION
  entity    Entity
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([role, user.userId], map: "role_user_id")
  @@index([entity.entityId])
}

enum ROLE {
  USER
  ORG
}

model Limitation {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  role      ROLE
  clientId  String   @unique
  count     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subscription {
  id                     String    @id @default(auto()) @map("_id") @db.ObjectId
  role                   ROLE
  clientId               String    @unique
  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
}

model Document {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  clientId    String
  isArchived  Boolean
  parentId    String?    @db.ObjectId
  content     String?
  coverImage  String?
  icon        String?
  isPublished Boolean
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  parent      Document?  @relation("DocumentParent", onUpdate: NoAction, onDelete: NoAction, fields: [parentId], references: [id])
  children    Document[] @relation("DocumentParent")

  @@index([clientId], name: "byClient")
  @@index([clientId, parentId], name: "byClientParent")
}
